/**
 *	
 */
define([
	"_views/UIKit",
	"text!_templates/reset.html",
],
function(
	UIKit,
	template
) {
	
	return UIKit.extend({

		id : 'password_reset',

		template : _.template(template),

		events : {
			'click [data-submit]'			: 'HandleSubmit',
			'click .close'					: 'close',
			'click #back'					: 'showLogin',
			'keypress input[name="email"]'	: 'enterKey'
		},

		initialize: function() {
			this.listenTo(this, "UIEnter", this.HandleSubmit);
		},

		render: function() {

			is_signup = (window.NewSiteLogin !== undefined && window.NewSiteLogin.defaults !== undefined && window.NewSiteLogin.defaults.is_new_site == true) ? true : false ;

			this.in_admin = (typeof Cargo == "object");
			var markup = this.template({
				is_admin: this.in_admin,
				is_signup: is_signup
			});

			this.$el.html( markup );
			
			setTimeout((function(){
				this.$el.find('input[name="email"]').focus();
			}).bind(this), 150);

			if (isMobile()) {
				this.$el.addClass('is_mobile');
			}

			return this;
		},

		/*
		 *	Submits the form
		 */
		HandleSubmit : function() {
			if (this.processing) {
				return false;
			}
			
			if( !this.ValidateForm() ) {
				return;
			} else {
				$('.processing').removeClass('hidden');
				this.processing = true;
			}

			var email = $.trim($('[name="email"]').val());
			var _this = this;
			
			
			$.post( 
				"dispatch/auth/handleResetFormPost", 
				{ email : email }, 
				function(dataObj) {
					_this.HandleFormReturn(dataObj);
				},
				"json"
			);

			return false;
		},

		enterKey: function(e) {
			if (e.which == 13) {
				this.HandleSubmit();
			}
		},

		
		/*
		 * Handle the return value from the form
		 */
		HandleFormReturn : function(dataObj) {
			// Handle an error
			if(dataObj.error.length > 0) {
				this.ShowError(dataObj.error.join('<br>'));
				this.processing = false;
				return false;
			}

			if(dataObj.jdata.success === true) {
				this.processing = false;
				$('.processing').addClass('hidden');

				var login_view = (window.Login_View) ? window.Login_View : window.NewSiteLogin;
				
				if(login_view) {
					login_view.ShowResetForm(dataObj.jdata.reset_email);
				}

				if(typeof Cargo != "undefined") {
					Cargo.Event.trigger('ShowResetForm', dataObj.jdata.reset_email);
				}
			}
		
		},

		/*
		 *	Validate the form before submitting
		 */
		ValidateForm : function() {
			var email = $.trim($('[name="email"]').val());

			if( email == "" ) {
				this.ShowError("That is not a valid email address.");
				return false;
			}
			
			return true;

		},

		/*
		 *	Display a message
		 */
		ShowMessage : function(message) {
			$("[data-validation-error]").addClass('hidden');
			$('.text', this.el).removeClass('error');
			$("[data-success-message]").removeClass('hidden').find('.col').html(message);
			$('#retrieval').addClass('hidden');
		},

		/*
		 *	Display an error
		 */
		ShowError : function(message) {
			$("[data-error-message]").html(message);
			$('.text', this.el).addClass('error');
			$("[data-validation-error]").removeClass('hidden');
			$('.processing').addClass('hidden');
		},
		
		close: function() {
			document.location.href = Cargo.Model.Site.get('direct_link');
		},
		
		showLogin: function(e) {

			if($('#settings').length > 0) {
				$('#settings').show();
				this.$el.remove();

			} else if(typeof Cargo == "object") {
				Cargo.Editor.Main.ShowLogin();

			} else {
				var login_view = (window.Login_View) ? window.Login_View : window.NewSiteLogin;
				
				this.$el.remove();
				login_view.ShowLogin();
			}
			return false;
		},


	});

});